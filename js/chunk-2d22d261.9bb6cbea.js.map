{"version":3,"sources":["webpack:///./src/components/springboot/Retry.vue?823a","webpack:///src/components/springboot/Retry.vue","webpack:///./src/components/springboot/Retry.vue?040c","webpack:///./src/components/springboot/Retry.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","scopedSlots","_u","key","fn","_v","proxy","staticRenderFns","name","components","CodeContainer","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,UAAU,SAAW,QAAQC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,gJAAgJC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,eAAe,SAAW,QAAQC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,+FAA+FC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,eAAeC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,+XAA+XC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,eAAeC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,iqCAAuqCC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,WAAWC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,qmBAA2mBC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,aAAaC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,wEAAwEC,OAAM,QAAW,QACttHC,EAAkB,G,YCsIP,GACfC,aACAC,YACAC,uBC1I8V,I,YCO1VC,EAAY,eACd,EACAnB,EACAe,GACA,EACA,KACA,KACA,MAIa,aAAAI,E","file":"js/chunk-2d22d261.9bb6cbea.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"row m-4\"},[_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'pom.xml',\"language\":'html'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"<dependency>\\n    <groupId>org.springframework.retry</groupId>\\n    <artifactId>spring-retry</artifactId>\\n</dependency>\\n              \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'build.gradle',\"language\":'html'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"dependencies {\\n    compile 'org.springframework.retry:spring-retry'\\n}\\n              \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'Application'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"import org.springframework.boot.SpringApplication;\\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\\nimport org.springframework.retry.annotation.EnableRetry;\\n\\n@EnableRetry\\n@SpringBootApplication\\npublic class Application {\\n    public static void main(String[] args) {\\n        SpringApplication.run(Application.class, args);\\n    }\\n}\\n              \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'BookService'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"import lombok.extern.slf4j.Slf4j;\\nimport org.springframework.retry.annotation.Backoff;\\nimport org.springframework.retry.annotation.Recover;\\nimport org.springframework.retry.annotation.Retryable;\\nimport org.springframework.stereotype.Service;\\n\\nimport javax.persistence.NoResultException;\\nimport java.util.concurrent.atomic.AtomicInteger;\\n\\n@Slf4j\\n@Service\\npublic class BookService {\\n\\n    private final AtomicInteger atomicInteger = new AtomicInteger(0);\\n\\n    // 當捕捉到 NoResultException 時自動進行重試\\n    // maxAttempts 表示最多執行次數(預設3)\\n    // backoff 當捕捉到錯誤時 停多少毫秒後再重試\\n    @Retryable(include = {NoResultException.class}, maxAttempts = 4, backoff = @Backoff(value = 2000))\\n    public String getBook() {\\n        int count = atomicInteger.incrementAndGet();\\n        log.info(\\\"count = \\\" + count);\\n        if (count < 2) {\\n            throw new NoResultException();\\n        } else {\\n            return \\\"ABC\\\";\\n        }\\n    }\\n\\n    // @Recover定義錯誤的處理 只能寫在同一個Class\\n    // 當重試次數超過maxAttempts時 會跳到對應的Recover來處理\\n    // 如果原本的功能有return的話 @Recover也要return\\n    @Recover\\n    public String recover(NoResultException e) {\\n        return \\\"error\\\";\\n    }\\n\\n}\\n              \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'TestApp'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"import com.service.BookService;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.boot.CommandLineRunner;\\nimport org.springframework.stereotype.Component;\\n\\n@Slf4j\\n@Component\\npublic class TestApp implements CommandLineRunner {\\n    @Autowired\\n    BookService bookService;\\n    @Override\\n    public void run(String... args) throws Exception {\\n        log.info(\\\"開始測試 Service\\\");\\n        String book = bookService.getBook();\\n        log.info(\\\"測試結果 \\\" + book);\\n        log.info(\\\"結束測試 Service\\\");\\n    }\\n}\\n\\n                \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'Reference'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"https://ithelp.ithome.com.tw/articles/10191550\\n                \")])]},proxy:true}])})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div class=\"row m-4\">\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'pom.xml'\" :language=\"'html'\">\r\n          <template v-slot:sourceCode>\r\n              <pre>\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n              </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'build.gradle'\" :language=\"'html'\">\r\n          <template v-slot:sourceCode>\r\n              <pre>\r\ndependencies {\r\n    compile 'org.springframework.retry:spring-retry'\r\n}\r\n              </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'Application'\">\r\n          <template v-slot:sourceCode>\r\n              <pre>\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.retry.annotation.EnableRetry;\r\n\r\n@EnableRetry\r\n@SpringBootApplication\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n              </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'BookService'\">\r\n          <template v-slot:sourceCode>\r\n              <pre>\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.retry.annotation.Backoff;\r\nimport org.springframework.retry.annotation.Recover;\r\nimport org.springframework.retry.annotation.Retryable;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.persistence.NoResultException;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\n@Slf4j\r\n@Service\r\npublic class BookService {\r\n\r\n    private final AtomicInteger atomicInteger = new AtomicInteger(0);\r\n\r\n    // 當捕捉到 NoResultException 時自動進行重試\r\n    // maxAttempts 表示最多執行次數(預設3)\r\n    // backoff 當捕捉到錯誤時 停多少毫秒後再重試\r\n    @Retryable(include = {NoResultException.class}, maxAttempts = 4, backoff = @Backoff(value = 2000))\r\n    public String getBook() {\r\n        int count = atomicInteger.incrementAndGet();\r\n        log.info(\"count = \" + count);\r\n        if (count &lt; 2) {\r\n            throw new NoResultException();\r\n        } else {\r\n            return \"ABC\";\r\n        }\r\n    }\r\n\r\n    // @Recover定義錯誤的處理 只能寫在同一個Class\r\n    // 當重試次數超過maxAttempts時 會跳到對應的Recover來處理\r\n    // 如果原本的功能有return的話 @Recover也要return\r\n    @Recover\r\n    public String recover(NoResultException e) {\r\n        return \"error\";\r\n    }\r\n\r\n}\r\n              </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'TestApp'\">\r\n          <template v-slot:sourceCode>\r\n              <pre>\r\nimport com.service.BookService;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.CommandLineRunner;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Slf4j\r\n@Component\r\npublic class TestApp implements CommandLineRunner {\r\n    @Autowired\r\n    BookService bookService;\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        log.info(\"開始測試 Service\");\r\n        String book = bookService.getBook();\r\n        log.info(\"測試結果 \" + book);\r\n        log.info(\"結束測試 Service\");\r\n    }\r\n}\r\n\r\n                </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'Reference'\">\r\n          <template v-slot:sourceCode>\r\n                <pre>\r\nhttps://ithelp.ithome.com.tw/articles/10191550\r\n                </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CodeContainer from \"@/components/shared/CodeContainer.vue\";\r\n\r\nexport default {\r\n  name: \"Retry\",\r\n  components: {\r\n    CodeContainer,\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Retry.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Retry.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Retry.vue?vue&type=template&id=3b8da63e&\"\nimport script from \"./Retry.vue?vue&type=script&lang=js&\"\nexport * from \"./Retry.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}