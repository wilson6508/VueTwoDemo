(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0ac258"],{"17fb":function(e,t,r){"use strict";r.r(t);var n=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("div",{staticClass:"row m-4"},[r("div",{staticClass:"col-md-8 col-12"},[r("CodeContainer",{attrs:{title:""},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[r("pre",[e._v('// xgroup create s1 g1 0 mkstream\ncreateStreamAddGroup("s1", "g1", "0");\n\n// xadd s1 * k1 v1\naddMsgToMq("s1", Collections.singletonMap("k1", "v1"));\n\n// xreadgroup group g1 c1 count 1 streams s1 >\nreadMsg("s1", "g1", "c1", null);\n\n// xreadgroup group g1 c1 count 1 streams s1 0\nreadMsg("s1", "g1", "c1", "0");\n\n// xack s1 g1 1678351006659-0\nackAndDelete("s1", "g1", "1678351006659-0");\n\npublic void createStreamAddGroup(String key, String group, String from) {\n    stringRedisTemplate.opsForStream().createGroup(key, ReadOffset.from(from), group);\n}\n\npublic RecordId addMsgToMq(String key, Map<String, String> map) {\n    return stringRedisTemplate.opsForStream().add(key, map);\n}\n\npublic RecordId readMsg(String key, String group, String consumer, String offset) {\n    Consumer from = Consumer.from(group, consumer);\n    StreamReadOptions options = StreamReadOptions.empty().count(1);\n    ReadOffset readOffset = Strings.isEmpty(offset) ? ReadOffset.lastConsumed() : ReadOffset.from(offset);\n    StreamOffset<String> streamOffset = StreamOffset.create(key, readOffset);\n    List<MapRecord<String, Object, Object>> list = stringRedisTemplate.opsForStream().read(from, options, streamOffset);\n    if (CollectionUtils.isEmpty(list)) {\n        return null;\n    }\n    MapRecord<String, Object, Object> entries = list.get(0);\n    Map<Object, Object> map = entries.getValue();\n    System.out.println("map = " + map);\n    RecordId recordId = entries.getId();\n    return recordId;\n}\n\npublic void ackAndDelete(String key, String group, String recordId) {\n    System.out.println("size = " + stringRedisTemplate.opsForStream().size(key));\n    Long rep = stringRedisTemplate.opsForStream().acknowledge(key, group, recordId);\n    if (rep != null && rep == 1) {\n        stringRedisTemplate.opsForStream().delete(key, recordId);\n    }\n    System.out.println("size = " + stringRedisTemplate.opsForStream().size(key));\n}\n            ')])]},proxy:!0}])})],1)])])},s=[],o=r("32f4"),a={name:"Streams",components:{CodeContainer:o["a"]}},i=a,d=r("2877"),p=Object(d["a"])(i,n,s,!1,null,null,null);t["default"]=p.exports}}]);
//# sourceMappingURL=chunk-2d0ac258.7ec53135.js.map