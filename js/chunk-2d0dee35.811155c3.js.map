{"version":3,"sources":["webpack:///./src/components/springboot/Cache.vue?8a4b","webpack:///src/components/springboot/Cache.vue","webpack:///./src/components/springboot/Cache.vue?9f44","webpack:///./src/components/springboot/Cache.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","scopedSlots","_u","key","fn","_v","proxy","staticRenderFns","name","components","CodeContainer","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,aAAaC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,4oBAAipBC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,YAAYC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,sQAA8QC,OAAM,QAAW,GAAGT,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,gBAAgB,CAACG,MAAM,CAAC,MAAQ,cAAcC,YAAYR,EAAIS,GAAG,CAAC,CAACC,IAAI,aAAaC,GAAG,WAAW,MAAO,CAACP,EAAG,MAAM,CAACJ,EAAIY,GAAG,8TAAkUC,OAAM,QAAW,QACv5DC,EAAkB,G,YCoFP,GACfC,aACAC,YACAC,uBCxF8V,I,YCO1VC,EAAY,eACd,EACAnB,EACAe,GACA,EACA,KACA,KACA,MAIa,aAAAI,E","file":"js/chunk-2d0dee35.811155c3.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"row m-4\"},[_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'Cacheable'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"/**\\n * 將方法運行的結果緩存\\n * CacheManager管理多個Cache組件, 每一個緩存組件有自己唯一一個名字\\n * cacheNames/value: 指定緩存的名字\\n *\\n * key: 緩存數據使用的key, 默認方法參數的值 id = 1 > key = 1\\n * #a0 #p0 #root.args[0]\\n * key/keyGenerator: 二選一\\n * key = \\\"#root.methodName + '[' + #id + ']'\\\"\\n * key不能用#result\\n *\\n * cacheManager/cacheResolver: 二選一\\n *\\n * condition為真 > 緩存\\n * condition = \\\"#id > 1\\\"\\n * condition = \\\"#a0 > 1 and #root.methodName eq 'aaa'\\n *\\n * unless為真 > 不緩存\\n * unless = \\\"#result == null\\\"\\n *\\n * sync: 是否使用異步模式\\n */\\n@Cacheable(cacheNames = {\\\"emp\\\"}, key=\\\"#a0\\\")\\npublic Employee getEmployee(Integer id) {\\n    return employeeMapper.getEmpById(id);\\n}\\n            \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'CachePut'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"/**\\n * 調用方法並更新緩存\\n * key = \\\"#employee.id\\\"\\n * key = \\\"#result.id\\\"\\n */\\n@CachePut(cacheNames = {\\\"emp\\\"}, key=\\\"#result.id\\\")\\npublic Employee updateEmployee(Employee employee) {\\n    employeeMapper.updateEmp(employee);\\n    return employee;\\n}\\n            \")])]},proxy:true}])})],1),_c('div',{staticClass:\"col-md-8 col-12\"},[_c('CodeContainer',{attrs:{\"title\":'CacheEvict'},scopedSlots:_vm._u([{key:\"sourceCode\",fn:function(){return [_c('pre',[_vm._v(\"/**\\n * 清除指定的緩存\\n *\\n * 清除所有緩存\\n * allEntries = true\\n *\\n * 執行方法前就清空緩存\\n * beforeInvocation = true\\n *\\n * 執行方法後才清空緩存, 報錯則不執行緩存清空\\n * beforeInvocation = false\\n */\\n@CacheEvict(cacheNames = {\\\"emp\\\"}, key = \\\"#id\\\")\\npublic void deleteEmployee(Integer id) {\\n    employeeMapper.deleteEmpById(id);\\n}\\n            \")])]},proxy:true}])})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div class=\"row m-4\">\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'Cacheable'\">\r\n          <template v-slot:sourceCode>\r\n            <pre>\r\n/**\r\n * 將方法運行的結果緩存\r\n * CacheManager管理多個Cache組件, 每一個緩存組件有自己唯一一個名字\r\n * cacheNames/value: 指定緩存的名字\r\n *\r\n * key: 緩存數據使用的key, 默認方法參數的值 id = 1 > key = 1\r\n * #a0 #p0 #root.args[0]\r\n * key/keyGenerator: 二選一\r\n * key = \"#root.methodName + '[' + #id + ']'\"\r\n * key不能用#result\r\n *\r\n * cacheManager/cacheResolver: 二選一\r\n *\r\n * condition為真 > 緩存\r\n * condition = \"#id > 1\"\r\n * condition = \"#a0 > 1 and #root.methodName eq 'aaa'\r\n *\r\n * unless為真 > 不緩存\r\n * unless = \"#result == null\"\r\n *\r\n * sync: 是否使用異步模式\r\n */\r\n@Cacheable(cacheNames = {\"emp\"}, key=\"#a0\")\r\npublic Employee getEmployee(Integer id) {\r\n    return employeeMapper.getEmpById(id);\r\n}\r\n            </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'CachePut'\">\r\n          <template v-slot:sourceCode>\r\n            <pre>\r\n/**\r\n * 調用方法並更新緩存\r\n * key = \"#employee.id\"\r\n * key = \"#result.id\"\r\n */\r\n@CachePut(cacheNames = {\"emp\"}, key=\"#result.id\")\r\npublic Employee updateEmployee(Employee employee) {\r\n    employeeMapper.updateEmp(employee);\r\n    return employee;\r\n}\r\n            </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n      <div class=\"col-md-8 col-12\">\r\n        <CodeContainer :title=\"'CacheEvict'\">\r\n          <template v-slot:sourceCode>\r\n            <pre>\r\n/**\r\n * 清除指定的緩存\r\n *\r\n * 清除所有緩存\r\n * allEntries = true\r\n *\r\n * 執行方法前就清空緩存\r\n * beforeInvocation = true\r\n *\r\n * 執行方法後才清空緩存, 報錯則不執行緩存清空\r\n * beforeInvocation = false\r\n */\r\n@CacheEvict(cacheNames = {\"emp\"}, key = \"#id\")\r\npublic void deleteEmployee(Integer id) {\r\n    employeeMapper.deleteEmpById(id);\r\n}\r\n            </pre>\r\n          </template>\r\n        </CodeContainer>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CodeContainer from \"@/components/shared/CodeContainer.vue\";\r\nexport default {\r\n  name: \"Cache\",\r\n  components: {\r\n    CodeContainer,\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Cache.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Cache.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Cache.vue?vue&type=template&id=6ad6206b&\"\nimport script from \"./Cache.vue?vue&type=script&lang=js&\"\nexport * from \"./Cache.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}