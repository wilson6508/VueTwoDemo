(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d210817"],{b7d0:function(e,n,a){"use strict";a.r(n);var t=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",[a("div",{staticClass:"row m-4"},[a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"pom.xml",language:"html"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("<dependency>\n    <groupId>net.sf.ehcache</groupId>\n    <artifactId>ehcache</artifactId>\n</dependency>\n              ")])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"build.gradle",language:"html"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("implementation 'net.sf.ehcache:ehcache:2.10.9.2'\nimplementation 'org.springframework.boot:spring-boot-starter-cache:2.7.3'\n              ")])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"application.yml"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("server:\n  port: 8088\ndebug: true\n// EhCacheCacheConfiguration\nspring:\n  cache:\n    type: ehcache\n    ehcache:\n      config: classpath:/ehcache.xml\n                    ")])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"application.properties"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("spring.cache.type=ehcache\nspring.cache.ehcache.config=classpath:/ehcache.xml\n            ")])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"ehcache.xml",language:"html"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v('<ehcache>\n    <diskStore path="d:\\\\ehcache" />\n\n    \x3c!-- maxElementsInMemory: 記憶體中緩存的最大數目 --\x3e\n    \x3c!-- overflowToDisk: 如果記憶體中資料超過限制，是否寫入硬碟 --\x3e\n    \x3c!-- diskSpoolBufferSizeMB: DiskStore緩存區大小(預設30MB) 每個Cache都應該有一個自己緩衝區 --\x3e\n    \x3c!-- maxElementsOnDisk:  硬碟中緩存的最大數目 --\x3e\n    \x3c!-- diskPersistent：是否缓存虚拟机重启期数据 --\x3e\n    \x3c!-- eternal: 是否永久有效 若為true 緩存永不過期 timeouts將被忽略  --\x3e\n    \x3c!-- timeToIdleSeconds: 閒置秒數(預設0為不限制)，超過則緩存過期 --\x3e\n    \x3c!-- timeToLiveSeconds: 存活秒數(預設0為不限制) --\x3e\n\n\x3c!--    <defaultCache maxElementsInMemory="1000"--\x3e\n\x3c!--                  overflowToDisk="true"--\x3e\n\x3c!--                  eternal="false"--\x3e\n\x3c!--                  timeToIdleSeconds="600"--\x3e\n\x3c!--                  timeToLiveSeconds="600" />--\x3e\n\n    <cache name="testCache"\n           maxElementsInMemory="2"\n           overflowToDisk="true"\n           eternal="true"\n           diskPersistent="true" />\n</ehcache>\n              ')])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"DemoApplication"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\n\n@EnableCaching\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n              ")])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"CacheController"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v('import com.service.CacheService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class CacheController {\n\n    @Autowired\n    CacheService cacheService;\n\n    @GetMapping("/createCache")\n    public Integer createCache(@RequestParam("a") Integer a, @RequestParam("b") Integer b) {\n        return cacheService.createCache(a, b);\n    }\n\n    @GetMapping("/readCache")\n    public String readCache() {\n        return cacheService.readCache();\n    }\n\n    @GetMapping("/clearCache")\n    public String clearCache() {\n        cacheService.clearCache();\n        return "clearCache";\n    }\n\n}\n              ')])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"CacheService"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v('import org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.concurrent.ConcurrentMapCacheManager;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CacheService {\n\n    @Cacheable(value = "testCache", key = "#a0 + \'+\' + #a1")\n    public Integer createCache(Integer a, Integer b) {\n        System.out.println("進入方法");\n        return a + b;\n    }\n\n    @Autowired\n    BeanFactory beanFactory;\n\n    public String readCache() {\n        CacheManager cacheManager = beanFactory.getBean(CacheManager.class);\n        Cache cache = cacheManager.getCache("testCache");\n        Map<Object, Element> all = cache.getAll(Arrays.asList("2+3", "2+4"));\n        return "readCache";\n    }\n\n    @CacheEvict(value = "testCache", allEntries = true)\n    public void clearCache() {}\n\n}\n\n                ')])]},proxy:!0}])})],1),a("div",{staticClass:"col-md-8 col-12"},[a("CodeContainer",{attrs:{title:"Browser"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[a("pre",[e._v("http://localhost:8088/createCache?a=2&b=3\nhttp://localhost:8088/createCache?a=2&b=4\nhttp://localhost:8088/readCache\nhttp://localhost:8088/clearCache\n                ")])]},proxy:!0}])})],1)])])},r=[],c=a("32f4"),o={name:"Ehcache",components:{CodeContainer:c["a"]}},i=o,s=a("2877"),l=Object(s["a"])(i,t,r,!1,null,null,null);n["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d210817.9ebf0a97.js.map